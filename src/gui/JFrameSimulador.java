/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import domain.MCuarentena;
import domain.ModelSEIMRRS2;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import optimization.problems.Covid19;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import support.ConexionDB;

/**
 *
 * @author J. Alfredo Brambila Hdez.
 */
public class JFrameSimulador extends javax.swing.JFrame {

    ModelSEIMRRS2 modelo;
    int region;
    int estrato;
    String var = "Frame 1";
    MCuarentena cuarentenas;

    /**
     * Creates new form JFrameMain
     */
    public JFrameSimulador() {
        initComponents();
	this.setLocationRelativeTo(null);

        region = 0;
        estrato = 0;
        modelo = new ModelSEIMRRS2();

        //ConexionDB c = new ConexionDB();
        //c.conectar();
        //datosEsc = new RWPeriodosCuarentena("cuarentena.csv");
        //modelo.seteCuarentena(datosEsc.leerValoresDeArchivo());
        //tamanioFramePane();
        cuarentenas = new MCuarentena(modelo.rutaBDS());
        informacionInicial();
        //int nregiones = modelo.getNRegiones();
        //int nestratos = modelo.getNEstratos();
        this.jComboBoxRegion.removeAllItems();
        this.jComboBoxEstrato.removeAllItems();
        this.jComboBoxEscenarios.removeAllItems();

        //for(int i=0; i<nregiones; i++)
        //this.jComboBoxRegion.addItem("Region "+(i+1));
        String[] regionesNomb = modelo.getRegionesNomb();
        for (int i = 0; i < regionesNomb.length; i++) {
            this.jComboBoxRegion.addItem(regionesNomb[i]);
        }
        this.jComboBoxRegion.addItem("Todas las regiones");

        String[] segmentosNomb = modelo.getSegmentosNomb();
        for (int i = 0; i < segmentosNomb.length; i++) {
            this.jComboBoxEstrato.addItem(segmentosNomb[i]);
        }
        this.jComboBoxEstrato.addItem("Todos los estratos");
        /*this.jComboBoxRegion.addItem("Tampico");
        this.jComboBoxRegion.addItem("Madero");
        this.jComboBoxRegion.addItem("Altamira");*/
        //for(int i=0; i<nestratos; i++)
        //this.jComboBoxEstrato.addItem("Estrato "+(i+1));
        /*this.jComboBoxEstrato.addItem("Rico Joven");
        this.jComboBoxEstrato.addItem("Rico Adulto");
        this.jComboBoxEstrato.addItem("Rico Adulto Mayor");
        this.jComboBoxEstrato.addItem("Bajos Recursos Joven");
        this.jComboBoxEstrato.addItem("Bajos Recursos Adulto");
        this.jComboBoxEstrato.addItem("Bajos Recursos Adulto Mayor");
        this.jComboBoxEstrato.addItem("Todos los estratos");*/
 /*this.jComboBoxEstrato.addItem("Pobres Jovenes");
        this.jComboBoxEstrato.addItem("Pobres Adultos");
        this.jComboBoxEstrato.addItem("Pobres Adultos Mayores");
        this.jComboBoxEstrato.addItem("No Pobres Jovenes");
        this.jComboBoxEstrato.addItem("No Pobres Adultos");
        this.jComboBoxEstrato.addItem("No Pobres Adultos Mayores");
        this.jComboBoxEstrato.addItem("Todos los estratos");*/

 /*this.jComboBoxEscenarios.addItem("Escenario 1");
        this.jComboBoxEscenarios.addItem("Escenario 2");
        this.jComboBoxEscenarios.addItem("Escenario 3");*/
        String[] cuarentenasSTR = cuarentenas.getEscenariosSTR();
        this.jComboBoxEscenarios.addItem("Sin cuarentena");
        //this.jComboBoxEscenarios.addItem("Con cuarentena");
        for (int i = 0; i < cuarentenasSTR.length; i++) {
            this.jComboBoxEscenarios.addItem("Escenario " + cuarentenasSTR[i]);
        }
	
	//---
	//this.modelo.prueba();
	//-
	
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelParam = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldPob = new javax.swing.JTextField();
        jButtonCargar = new javax.swing.JButton();
        jButtonExportExcel = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldBeta0 = new javax.swing.JTextField();
        jTextFieldBeta1 = new javax.swing.JTextField();
        jTextFieldBeta2 = new javax.swing.JTextField();
        jTextFieldBeta3 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextFieldDelta0 = new javax.swing.JTextField();
        jTextFieldDelta1 = new javax.swing.JTextField();
        jTextFieldDelta2 = new javax.swing.JTextField();
        jTextFieldDelta3 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jTextFieldPHIX0 = new javax.swing.JTextField();
        jTextFieldETHA0 = new javax.swing.JTextField();
        jTextFieldPHIX1 = new javax.swing.JTextField();
        jTextFieldETHA1 = new javax.swing.JTextField();
        jTextFieldPHIX2 = new javax.swing.JTextField();
        jTextFieldETHA2 = new javax.swing.JTextField();
        jTextFieldPHIX3 = new javax.swing.JTextField();
        jTextFieldETHA3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldDELT = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMIUN = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldKAPP = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldMIUUB = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldPCONB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldPTRA = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanelTable = new javax.swing.JPanel();
        jScrollPaneResultados = new javax.swing.JScrollPane();
        jTableResultados = new javax.swing.JTable();
        jPanelGrafica = new javax.swing.JPanel();
        jPanelSelector = new javax.swing.JPanel();
        jLabelSelectorEdos = new javax.swing.JLabel();
        jComboBoxEstados = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxEstrato = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxEscenarios = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modelo SEIMR/R-S");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanelParam.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Población:");

        jTextFieldPob.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jButtonCargar.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButtonCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/support/img/Actions-dialog-ok-apply-icon.png"))); // NOI18N
        jButtonCargar.setText("Aplicar parámetros");
        jButtonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarActionPerformed(evt);
            }
        });

        jButtonExportExcel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButtonExportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/support/img/excel24.png"))); // NOI18N
        jButtonExportExcel.setText("Exportar");
        jButtonExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportExcelActionPerformed(evt);
            }
        });

        jLabel21.setText("Parámetros");

        jLabel22.setText("BETA:");

        jLabel23.setText("DELTA:");

        jLabel24.setText("PHIX:");

        jLabel25.setText("ETHA:");

        jLabel2.setText("DELT:");

        jLabel3.setText("MiuN:");

        jLabel4.setText("KAPP:");

        jLabel5.setText("MIUUB:");

        jLabel6.setText("PCONB:");

        jLabel7.setText("PTRA:");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/support/img/equalizer-icon.png"))); // NOI18N
        jButton2.setText("P. Auto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/support/img/arec.png"))); // NOI18N
        jButton3.setText("Impacto");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/support/img/Healthcare-Hospital-3-icon.png"))); // NOI18N
        jButton4.setText("Recursos");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelParamLayout = new javax.swing.GroupLayout(jPanelParam);
        jPanelParam.setLayout(jPanelParamLayout);
        jPanelParamLayout.setHorizontalGroup(
            jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParamLayout.createSequentialGroup()
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelParamLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jTextFieldDelta0, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDelta1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDelta2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDelta3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jTextFieldBeta0, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldBeta1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldBeta2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldBeta3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jTextFieldPHIX0, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPHIX1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPHIX2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPHIX3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jTextFieldETHA0, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldETHA1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldETHA2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldETHA3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelParamLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel21))
                    .addGroup(jPanelParamLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jTextFieldPob, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelParamLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1))
                    .addGroup(jPanelParamLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jButtonCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonExportExcel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4))
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(20, 20, 20)
                                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldDELT, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldMIUUB, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelParamLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6))
                                    .addGroup(jPanelParamLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel3)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldMIUN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPCONB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanelParamLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addGap(365, 365, 365)
                        .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldKAPP, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelParamLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPTRA, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelParamLayout.setVerticalGroup(
            jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldPob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jTextFieldBeta0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBeta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBeta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBeta3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jTextFieldDelta0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDelta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDelta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDelta3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextFieldPHIX0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPHIX1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPHIX2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPHIX3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jTextFieldETHA0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldETHA1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldETHA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldETHA3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldDELT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldMIUN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldKAPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldMIUUB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldPCONB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldPTRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCargar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExportExcel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanelTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTableResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "t", "S", "E", "I0", "I1", "I2", "I3", "R", "D", "NR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPaneResultados.setViewportView(jTableResultados);

        javax.swing.GroupLayout jPanelTableLayout = new javax.swing.GroupLayout(jPanelTable);
        jPanelTable.setLayout(jPanelTableLayout);
        jPanelTableLayout.setHorizontalGroup(
            jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneResultados)
                .addContainerGap())
        );
        jPanelTableLayout.setVerticalGroup(
            jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelGrafica.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanelGraficaLayout = new javax.swing.GroupLayout(jPanelGrafica);
        jPanelGrafica.setLayout(jPanelGraficaLayout);
        jPanelGraficaLayout.setHorizontalGroup(
            jPanelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelGraficaLayout.setVerticalGroup(
            jPanelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelSelector.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelSelectorEdos.setText("Seleccione Estado a Gráficar");

        jComboBoxEstados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos los Estados", "Susceptibles (S)", "Expuestos (E)", "Asintomáticos (I0)", "Moderados (I1)", "Severos (I2)", "Críticos (I3)", "Recuperados (R)", "Muertos (D)", "NR" }));
        jComboBoxEstados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEstadosItemStateChanged(evt);
            }
        });
        jComboBoxEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadosActionPerformed(evt);
            }
        });

        jComboBoxRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxRegion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxRegionItemStateChanged(evt);
            }
        });

        jLabelRegion.setText("Region");

        jComboBoxEstrato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxEstrato.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEstratoItemStateChanged(evt);
            }
        });
        jComboBoxEstrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstratoActionPerformed(evt);
            }
        });

        jLabel8.setText("Estrato");

        jComboBoxEscenarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxEscenarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEscenariosItemStateChanged(evt);
            }
        });

        jLabel10.setText("Escenario");

        javax.swing.GroupLayout jPanelSelectorLayout = new javax.swing.GroupLayout(jPanelSelector);
        jPanelSelector.setLayout(jPanelSelectorLayout);
        jPanelSelectorLayout.setHorizontalGroup(
            jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelectorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSelectorEdos)
                    .addComponent(jComboBoxEstados, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion))
                .addGap(18, 18, 18)
                .addGroup(jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxEstrato, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jComboBoxEscenarios, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSelectorLayout.setVerticalGroup(
            jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSelectorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSelectorEdos)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEstrato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEscenarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void informacionInicial() {

        //System.out.println("Poblacion: ");
        //System.out.println(modelo.getPobTotalRS(0, 0));
        //System.out.println(modelo.getPobTotalRS(1, 0));
        this.jTextFieldPob.setText(String.valueOf(modelo.getPobTotal()));
        //this.jTextFieldZetaR1.setText(String.valueOf(modelo.getZetaR1()));
        //this.jTextFieldZetaR2.setText(String.valueOf(modelo.getZetaR2()));
        //this.jTextFieldZetaR3.setText(String.valueOf(modelo.getZetaR3()));

        this.jTextFieldBeta0.setText(String.valueOf(modelo.getBETAB()[0]));
        this.jTextFieldBeta1.setText(String.valueOf(modelo.getBETAB()[1]));
        this.jTextFieldBeta2.setText(String.valueOf(modelo.getBETAB()[2]));
        this.jTextFieldBeta3.setText(String.valueOf(modelo.getBETAB()[3]));

        this.jTextFieldDelta0.setText(String.valueOf(modelo.getDELXB()[0]));
        this.jTextFieldDelta1.setText(String.valueOf(modelo.getDELXB()[1]));
        this.jTextFieldDelta2.setText(String.valueOf(modelo.getDELXB()[2]));
        this.jTextFieldDelta3.setText(String.valueOf(modelo.getDELXB()[3]));

        this.jTextFieldPHIX0.setText(String.valueOf(modelo.getPHIXB()[0]));
        this.jTextFieldPHIX1.setText(String.valueOf(modelo.getPHIXB()[1]));
        this.jTextFieldPHIX2.setText(String.valueOf(modelo.getPHIXB()[2]));
        this.jTextFieldPHIX3.setText(String.valueOf(modelo.getPHIXB()[3]));

        this.jTextFieldETHA0.setText(String.valueOf(modelo.getETAXB()[0]));
        this.jTextFieldETHA1.setText(String.valueOf(modelo.getETAXB()[1]));
        this.jTextFieldETHA2.setText(String.valueOf(modelo.getETAXB()[2]));
        this.jTextFieldETHA3.setText(String.valueOf(modelo.getETAXB()[3]));

        this.jTextFieldDELT.setText(String.valueOf(modelo.getDELT()));
        this.jTextFieldMIUN.setText(String.valueOf(modelo.getMIUN()));
        this.jTextFieldKAPP.setText(String.valueOf(modelo.getKAPP()));
        this.jTextFieldMIUUB.setText(String.valueOf(modelo.getMIUUB()));
        this.jTextFieldPCONB.setText(String.valueOf(modelo.getPCONB()));
        this.jTextFieldPTRA.setText(String.valueOf(modelo.getPTRA()));

        this.jTextFieldPob.setEnabled(false);

        //this.jTextFieldZeta.setEnabled(false);
        //this.jTextFieldBetta.setEnabled(false);
        //this.jTextFieldMiu.setEnabled(false);
        //this.jTextFieldMiuN.setEnabled(false);
        //this.jTextFieldPsi.setEnabled(false);
        //this.jTextFieldGamma.setEnabled(false);
        //this.jButtonCargar.setEnabled(false);
        String[] columnNames = {"t", "S", "E", "I0", "I1", "I2", "I3", "R", "D", "NR"};

        String[][] data = null;
        if (this.jComboBoxRegion.getSelectedIndex() >= 0 && this.jComboBoxRegion.getSelectedIndex() < modelo.getNRegiones()) {
            if (this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < modelo.getNEstratos()) {
                data = modelo.getValoresSEIRMRRS(region, estrato);
            } else if (this.jComboBoxEstrato.getSelectedIndex() == modelo.getNEstratos()) {
                //System.out.println("------------> TODAS LAS REG");
                data = modelo.getValoresSEIRMRRS_Region(region);
                //data = modelo.getValoresSEIRMRRS_RegionAgregado();
                //graficarTodo();
            }

            this.jTableResultados.setModel(new DefaultTableModel(data, columnNames));
            // region, estrato ******************************************
            if (this.jComboBoxEstados.getSelectedIndex() == 0) {
                if (this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < modelo.getNEstratos()) {
                    graficar(region, estrato);
                } else {
                    graficar(region);
                }
            } else {
                if (this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < 6) {
                    graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(), region, estrato);
                } else {
                    //graficar(region); 
                    graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(), region);
                }
            }
        } else if (this.jComboBoxRegion.getSelectedIndex() == modelo.getNRegiones()) {
            System.out.println("***************** TODAS LAS REGIONES **********************************");
            data = modelo.getValoresSEIRMRRS_RegionAgregado();
            this.jTableResultados.setModel(new DefaultTableModel(data, columnNames));
            graficarTodo();
        }

    }

    public void tamanioFramePane() {
        Dimension jframeSize = this.getSize();
        Dimension jpanelGraficaSize = this.jPanelGrafica.getSize();
        Dimension jpanelSelSize = this.jPanelSelector.getSize();
        Dimension jPanelParamSize = this.jPanelParam.getSize();
        Dimension jPanelTableSize = this.jPanelTable.getSize();

        jPanelParam.setSize((int) (jframeSize.width * 0.4), jPanelParamSize.height);
        jPanelTable.setSize((int) (jframeSize.width * 0.4), jPanelTableSize.height);

        jPanelSelector.setSize((int) (jframeSize.width * 0.6), jpanelSelSize.height);
        jPanelGrafica.setSize((int) (jframeSize.width * 0.6), jpanelGraficaSize.height);

    }
    private void jComboBoxEstadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEstadosItemStateChanged
        // TODO add your handling code here:
        //System.out.println(this.jComboBoxEstados.getSelectedItem().toString());
        //System.out.println(this.jComboBoxEstados.getSelectedIndex());
        if (this.jComboBoxEstados.getSelectedIndex() == 0) {
            // region, estrato ******************************************
            //graficar(region,estrato);
            if (this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < modelo.getNEstratos()) {
                graficar(region, estrato);
            } else {
                graficar(region);
                //graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(),region);
            }
        } else {
            // region, estrato ******************************************
            //graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(),region,estrato);
            if (this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < modelo.getNEstratos()) {
                graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(), region, estrato);
            } else {
                graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(), region);
            }
        }

    }//GEN-LAST:event_jComboBoxEstadosItemStateChanged

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        //tamanioFramePane();
        if (this.jComboBoxEstados.getSelectedIndex() == 0) {
            informacionInicial();
        } else {
            // region, estrato ******************************************

            if (this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < 6) {
                graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(), region, estrato);
            } else {
                graficar(this.jComboBoxEstados.getSelectedIndex(), this.jComboBoxEstados.getSelectedItem().toString(), region);
            }
        }
    }//GEN-LAST:event_formComponentResized

    private void jComboBoxEstratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstratoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEstratoActionPerformed

    private void jComboBoxRegionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxRegionItemStateChanged
        // TODO add your handling code here:
        if (this.jComboBoxRegion.getSelectedIndex() >= 0) {
            this.region = this.jComboBoxRegion.getSelectedIndex();
            System.out.println("Region: " + this.jComboBoxRegion.getSelectedIndex());
            this.informacionInicial();
        }

    }//GEN-LAST:event_jComboBoxRegionItemStateChanged

    private void jComboBoxEstratoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEstratoItemStateChanged
        // TODO add your handling code here:
        //if(this.jComboBoxEstrato.getSelectedIndex() >= 0 && this.jComboBoxEstrato.getSelectedIndex() < 6) {
        this.estrato = this.jComboBoxEstrato.getSelectedIndex();
        System.out.println("Indx Estrato: " + this.jComboBoxEstrato.getSelectedIndex());
        this.informacionInicial();
        //} else {
        //this.estrato = this.jComboBoxEstrato.getSelectedIndex();
        //getValoresSEIRMRRS_Region(this.estrato);
        //}

    }//GEN-LAST:event_jComboBoxEstratoItemStateChanged

    private void jComboBoxEscenariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEscenariosItemStateChanged

        //if(evt.getStateChange() == ItemEvent.SELECTED) {
        this.modelo.setEscenario(this.jComboBoxEscenarios.getSelectedIndex() + 1);
        modelo.condicionesIniciales();
        modelo.simulaModelo();
        this.informacionInicial();
        //}


    }//GEN-LAST:event_jComboBoxEscenariosItemStateChanged

    private void jComboBoxEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEstadosActionPerformed

    private void jButtonExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportExcelActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser file = new JFileChooser();
            file.setFileFilter(new FileNameExtensionFilter("Excel", "xlsx"));

            //file.showOpenDialog(this);
            int respuesta = file.showSaveDialog(this);
            if (respuesta == JFileChooser.APPROVE_OPTION) {
                System.out.println("Guardar..." + file.getSelectedFile().toString() + ".xlsx");
                //guardarEnArchivoExcel(file.getSelectedFile().toString()+".xlsx", modelo.getT(), modelo.getS(), modelo.getE(),modelo.getI0(),modelo.getI1(),modelo.getI2(),modelo.getI3(),modelo.getR(),modelo.getD(),modelo.getNR());
                if (this.jComboBoxEstrato.getSelectedIndex() < 6) {
                    guardarEnArchivoExcel(file.getSelectedFile().toString() + ".xlsx", region, estrato);
                } else if (this.jComboBoxEstrato.getSelectedIndex() == 6) {
                    guardarEnArchivoExcel(file.getSelectedFile().toString() + ".xlsx", region);
                }
            } else {
                System.out.println("Cancel");
            }
            //InputStream in = getClass().getResourceAsStream("/support/plantilla.xlsx");
            //System.out.println(in.toString());
            /**
             * abrimos el archivo seleccionado
             */
            //this.jTextFieldRutaArchivo.setText(file.getSelectedFile().getAbsolutePath());

            //File archivo = file.getSelectedFile();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        } finally {

        }
    }//GEN-LAST:event_jButtonExportExcelActionPerformed

    private void jButtonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarActionPerformed
        // TODO add your handling code here:
        double[] paramsArr = new double[4];
        paramsArr[0] = Double.parseDouble(this.jTextFieldBeta0.getText());
        paramsArr[1] = Double.parseDouble(this.jTextFieldBeta1.getText());
        paramsArr[2] = Double.parseDouble(this.jTextFieldBeta2.getText());
        paramsArr[3] = Double.parseDouble(this.jTextFieldBeta3.getText());
        modelo.setBETAB(paramsArr);

        paramsArr = new double[4];
        paramsArr[0] = Double.parseDouble(this.jTextFieldDelta0.getText());
        paramsArr[1] = Double.parseDouble(this.jTextFieldDelta1.getText());
        paramsArr[2] = Double.parseDouble(this.jTextFieldDelta2.getText());
        paramsArr[3] = Double.parseDouble(this.jTextFieldDelta3.getText());
        modelo.setDELXB(paramsArr);

        paramsArr = new double[4];
        paramsArr[0] = Double.parseDouble(this.jTextFieldPHIX0.getText());
        paramsArr[1] = Double.parseDouble(this.jTextFieldPHIX1.getText());
        paramsArr[2] = Double.parseDouble(this.jTextFieldPHIX2.getText());
        paramsArr[3] = Double.parseDouble(this.jTextFieldPHIX3.getText());
        modelo.setPHIXB(paramsArr);

        paramsArr = new double[4];
        paramsArr[0] = Double.parseDouble(this.jTextFieldETHA0.getText());
        paramsArr[1] = Double.parseDouble(this.jTextFieldETHA1.getText());
        paramsArr[2] = Double.parseDouble(this.jTextFieldETHA2.getText());
        paramsArr[3] = Double.parseDouble(this.jTextFieldETHA3.getText());
        modelo.setETAXB(paramsArr);

        modelo.setDELT(Double.parseDouble(this.jTextFieldDELT.getText()));
        modelo.setMIUN(Double.parseDouble(this.jTextFieldMIUN.getText()));
        modelo.setKAPP(Double.parseDouble(this.jTextFieldKAPP.getText()));
        modelo.setMIUUB(Double.parseDouble(this.jTextFieldMIUUB.getText()));
        modelo.setPCONB(Double.parseDouble(this.jTextFieldPCONB.getText()));
        modelo.setPTRA(Double.parseDouble(this.jTextFieldPTRA.getText()));

        modelo.condicionesIniciales();
        modelo.simulaModelo();
        informacionInicial();
        //jTable1.repaint();
    }//GEN-LAST:event_jButtonCargarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //JFramePeriodosCuarentena form = new JFramePeriodosCuarentena(this);
        //form.setVisible(true);
	JFrameImpactoSocioEconomico form = new JFrameImpactoSocioEconomico();
	form.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFrameAutoPamsM v = new JFrameAutoPamsM(this);
        v.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (this.jComboBoxEstrato.getSelectedIndex() < 6) {
            guardarEnArchivoExcel("serie_simulador" + ".xlsx", region, estrato);
        } else if (this.jComboBoxEstrato.getSelectedIndex() == 6) {
            guardarEnArchivoExcel("serie_simulador" + ".xlsx", region);
        }

        //fromSeriesSimulador
        JFrameRecursosFSim v = new JFrameRecursosFSim();
        v.fromSeriesSimulador();
        v.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    //public void guardarEnArchivoExcel(String nombreArchivo, double t[], double S[], double E[],double I0[],double I1[],double I2[],double I3[], double R[], double D[], double NR[]) {
    public void guardarEnArchivoExcel(String nombreArchivo, int rg, int ss) {
        try {

            FileInputStream file = new FileInputStream("data.dat");

            XSSFWorkbook workbook = new XSSFWorkbook(file);
            XSSFSheet sheet = workbook.getSheetAt(0);
            Cell cell = null;
            XSSFRow sheetrow;

            //int pobTotal = modelo.getPobTotal();
            //Update the value of cell
            //cell = sheet.getRow(row).getCell(col);
            //cell.setCellValue("Pass");
            int col = 0;
            for (int row = 1; row < modelo.getT().length; row++) {
                col = 0;
                //Retrieve the row and check for null
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(t[row-1]);
                cell.setCellValue(modelo.getT()[row - 1]);

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(S[row-1]*pobTotal);
                cell.setCellValue(modelo.getS()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(E[row-1]*pobTotal);
                cell.setCellValue(modelo.getE()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I0[row-1]*pobTotal);
                cell.setCellValue(modelo.getI0()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I1[row-1]*pobTotal);
                cell.setCellValue(modelo.getI1()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I2[row-1]*pobTotal);
                cell.setCellValue(modelo.getI2()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I3[row-1]*pobTotal);
                cell.setCellValue(modelo.getI3()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(R[row-1]*pobTotal);
                cell.setCellValue(modelo.getR()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(D[row-1]*pobTotal);
                cell.setCellValue(modelo.getD()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(NR[row-1]*pobTotal);
                cell.setCellValue(modelo.getNR()[rg][ss][row - 1] * modelo.getPobTotalRS(rg, ss));
            }

            file.close();

            FileOutputStream outFile = new FileOutputStream(new File(nombreArchivo));
            workbook.write(outFile);
            outFile.close();
            System.out.println("Informacion guardada en: resultadosExcel_SEIMR_R_S_E.xlsx");
        } catch (Exception e) {
            System.out.println("Error al cargar archivo XLSX: " + e);
        } finally {
            JOptionPane.showMessageDialog(null, ""
                    + "Se ha guardado el archivo correctamente",
                    "Archivo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    //RG
    public void guardarEnArchivoExcel(String nombreArchivo, int rg) {
        try {

            FileInputStream file = new FileInputStream("data.dat");

            XSSFWorkbook workbook = new XSSFWorkbook(file);
            XSSFSheet sheet = workbook.getSheetAt(0);
            Cell cell = null;
            XSSFRow sheetrow;

            //int pobTotal = modelo.getPobTotal();
            //Update the value of cell
            //cell = sheet.getRow(row).getCell(col);
            //cell.setCellValue("Pass");
            int col = 0;
            for (int row = 1; row < modelo.getT().length; row++) {
                col = 0;
                //Retrieve the row and check for null
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(t[row-1]);
                cell.setCellValue(modelo.getT()[row - 1]);

                col++; // 1
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(S[row-1]*pobTotal);
                // modelo.sumaElementosEstadoWPob(modelo.getS(),rg,i)
                //cell.setCellValue(modelo.getS()[rg][ss][row-1]*modelo.getPobTotalRS(rg, ss));
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getS(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(E[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getE(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I0[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getI0(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I1[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getI1(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I2[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getI2(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(I3[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getI3(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(R[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getR(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(D[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getD(), rg, row - 1));

                col++;
                sheetrow = sheet.getRow(row);
                if (sheetrow == null) {
                    sheetrow = sheet.createRow(row);
                }
                //Update the value of cell
                cell = sheetrow.getCell(col);
                if (cell == null) {
                    cell = sheetrow.createCell(col);
                }
                //cell.setCellValue(NR[row-1]*pobTotal);
                cell.setCellValue(modelo.sumaElementosEstadoWPob(modelo.getNR(), rg, row - 1));
            }

            file.close();

            FileOutputStream outFile = new FileOutputStream(new File(nombreArchivo));
            workbook.write(outFile);
            outFile.close();
            System.out.println("Informacion guardada en: resultadosExcel_SEIMR_R_S_E.xlsx");
        } catch (Exception e) {
            System.out.println("Error al cargar archivo XLSX: " + e);
        } finally {
            JOptionPane.showMessageDialog(null, ""
                    + "Se ha guardado el archivo correctamente",
                    "Archivo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public void graficar(int rg, int ss) {

        XYSeriesCollection dataset;
        dataset = new XYSeriesCollection();
        XYSeries dataS = new XYSeries("S");
        XYSeries dataE = new XYSeries("E");
        XYSeries dataI0 = new XYSeries("I0");
        XYSeries dataI1 = new XYSeries("I1");
        XYSeries dataI2 = new XYSeries("I2");
        XYSeries dataI3 = new XYSeries("I3");
        XYSeries dataR = new XYSeries("R");
        XYSeries dataD = new XYSeries("D");
        XYSeries dataNR = new XYSeries("NR");

        for (int i = 0; i < modelo.getT().length; i++) {
            dataS.add(modelo.getT()[i], modelo.getS()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataE.add(modelo.getT()[i], modelo.getE()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataI0.add(modelo.getT()[i], modelo.getI0()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataI1.add(modelo.getT()[i], modelo.getI1()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataI2.add(modelo.getT()[i], modelo.getI2()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataI3.add(modelo.getT()[i], modelo.getI3()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataR.add(modelo.getT()[i], modelo.getR()[rg][ss][i] * modelo.getPobTotalRS(rg, ss)); //
            dataD.add(modelo.getT()[i], modelo.getD()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
            dataNR.add(modelo.getT()[i], modelo.getNR()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
        }

        dataset.addSeries(dataS);
        dataset.addSeries(dataE);
        dataset.addSeries(dataI0);
        dataset.addSeries(dataI1);
        dataset.addSeries(dataI2);
        dataset.addSeries(dataI3);
        dataset.addSeries(dataR); //
        dataset.addSeries(dataD);
        dataset.addSeries(dataNR);

        JFreeChart grafica = ChartFactory.createXYLineChart("SEIMR-R-S", "Días", "Población", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        add(cp);

        Dimension d = this.jPanelGrafica.getSize();

        cp.setBounds(20, 20, d.width - 20, d.height - 20);

        final XYPlot plot = grafica.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesPaint(1, Color.GREEN);
        renderer.setSeriesPaint(2, Color.YELLOW);
        renderer.setSeriesPaint(3, Color.GRAY);
        renderer.setSeriesPaint(4, Color.BLUE);
        renderer.setSeriesPaint(5, Color.CYAN);
        renderer.setSeriesPaint(6, Color.MAGENTA);
        renderer.setSeriesPaint(7, Color.BLACK);
        renderer.setSeriesPaint(8, Color.ORANGE);

        renderer.setSeriesStroke(0, new BasicStroke(2.0f));
        renderer.setSeriesStroke(1, new BasicStroke(2.0f));
        renderer.setSeriesStroke(2, new BasicStroke(2.0f));
        renderer.setSeriesStroke(3, new BasicStroke(2.0f));
        renderer.setSeriesStroke(4, new BasicStroke(2.0f));
        renderer.setSeriesStroke(5, new BasicStroke(2.0f));
        renderer.setSeriesStroke(6, new BasicStroke(2.0f));
        renderer.setSeriesStroke(7, new BasicStroke(2.0f));
        renderer.setSeriesStroke(8, new BasicStroke(2.0f));

        plot.setRenderer(renderer);

        this.jPanelGrafica.removeAll();
        this.jPanelGrafica.add(cp, BorderLayout.CENTER);
        this.jPanelGrafica.validate();
    }

    public void graficar(int rg) {

        XYSeriesCollection dataset;

        dataset = new XYSeriesCollection();
        XYSeries dataS = new XYSeries("S");
        XYSeries dataE = new XYSeries("E");
        XYSeries dataI0 = new XYSeries("I0");
        XYSeries dataI1 = new XYSeries("I1");
        XYSeries dataI2 = new XYSeries("I2");
        XYSeries dataI3 = new XYSeries("I3");
        XYSeries dataR = new XYSeries("R");
        XYSeries dataD = new XYSeries("D");
        XYSeries dataNR = new XYSeries("NR");

        for (int i = 0; i < modelo.getT().length; i++) {
            //modelo.sumaElementosEstado(modelo.getS(),rg,i)*modelo.getPobTotalRS_Region(rg)
            //sumaElementosEstadoWPob
            dataS.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getS(), rg, i));
            dataE.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getE(), rg, i));
            dataI0.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI0(), rg, i));
            dataI1.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI1(), rg, i));
            dataI2.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI2(), rg, i));
            dataI3.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI3(), rg, i));
            dataR.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getR(), rg, i)); //
            dataD.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getD(), rg, i));
            dataNR.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getNR(), rg, i));
        }

        dataset.addSeries(dataS);
        dataset.addSeries(dataE);
        dataset.addSeries(dataI0);
        dataset.addSeries(dataI1);
        dataset.addSeries(dataI2);
        dataset.addSeries(dataI3);
        dataset.addSeries(dataR); //
        dataset.addSeries(dataD);
        dataset.addSeries(dataNR);

        JFreeChart grafica = ChartFactory.createXYLineChart("SEIMR-R-S", "Días", "Población", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        add(cp);

        Dimension d = this.jPanelGrafica.getSize();

        cp.setBounds(20, 20, d.width - 20, d.height - 20);

        final XYPlot plot = grafica.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesPaint(1, Color.GREEN);
        renderer.setSeriesPaint(2, Color.YELLOW);
        renderer.setSeriesPaint(3, Color.GRAY);
        renderer.setSeriesPaint(4, Color.BLUE);
        renderer.setSeriesPaint(5, Color.CYAN);
        renderer.setSeriesPaint(6, Color.MAGENTA);
        renderer.setSeriesPaint(7, Color.BLACK);
        renderer.setSeriesPaint(8, Color.ORANGE);

        renderer.setSeriesStroke(0, new BasicStroke(2.0f));
        renderer.setSeriesStroke(1, new BasicStroke(2.0f));
        renderer.setSeriesStroke(2, new BasicStroke(2.0f));
        renderer.setSeriesStroke(3, new BasicStroke(2.0f));
        renderer.setSeriesStroke(4, new BasicStroke(2.0f));
        renderer.setSeriesStroke(5, new BasicStroke(2.0f));
        renderer.setSeriesStroke(6, new BasicStroke(2.0f));
        renderer.setSeriesStroke(7, new BasicStroke(2.0f));
        renderer.setSeriesStroke(8, new BasicStroke(2.0f));

        plot.setRenderer(renderer);

        this.jPanelGrafica.removeAll();
        this.jPanelGrafica.add(cp, BorderLayout.CENTER);
        this.jPanelGrafica.validate();
    }

    public void graficarTodo() {

        XYSeriesCollection dataset;

        dataset = new XYSeriesCollection();
        XYSeries dataS = new XYSeries("S");
        XYSeries dataE = new XYSeries("E");
        XYSeries dataI0 = new XYSeries("I0");
        XYSeries dataI1 = new XYSeries("I1");
        XYSeries dataI2 = new XYSeries("I2");
        XYSeries dataI3 = new XYSeries("I3");
        XYSeries dataR = new XYSeries("R");
        XYSeries dataD = new XYSeries("D");
        XYSeries dataNR = new XYSeries("NR");

        for (int i = 0; i < modelo.getT().length; i++) {
            //modelo.sumaElementosEstado(modelo.getS(),rg,i)*modelo.getPobTotalRS_Region(rg)
            //sumaElementosEstadoWPob
            dataS.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getS(), i));
            dataE.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getE(), i));
            dataI0.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getI0(), i));
            dataI1.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getI1(), i));
            dataI2.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getI2(), i));
            dataI3.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getI3(), i));
            dataR.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getR(), i)); //
            dataD.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getD(), i));
            dataNR.add(modelo.getT()[i], modelo.sumaElementosEstadoWPobTodo(modelo.getNR(), i));
        }

        dataset.addSeries(dataS);
        dataset.addSeries(dataE);
        dataset.addSeries(dataI0);
        dataset.addSeries(dataI1);
        dataset.addSeries(dataI2);
        dataset.addSeries(dataI3);
        dataset.addSeries(dataR); //
        dataset.addSeries(dataD);
        dataset.addSeries(dataNR);

        JFreeChart grafica = ChartFactory.createXYLineChart("SEIMR-R-S", "Días", "Población", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        add(cp);

        Dimension d = this.jPanelGrafica.getSize();

        cp.setBounds(20, 20, d.width - 20, d.height - 20);

        final XYPlot plot = grafica.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesPaint(1, Color.GREEN);
        renderer.setSeriesPaint(2, Color.YELLOW);
        renderer.setSeriesPaint(3, Color.GRAY);
        renderer.setSeriesPaint(4, Color.BLUE);
        renderer.setSeriesPaint(5, Color.CYAN);
        renderer.setSeriesPaint(6, Color.MAGENTA);
        renderer.setSeriesPaint(7, Color.BLACK);
        renderer.setSeriesPaint(8, Color.ORANGE);

        renderer.setSeriesStroke(0, new BasicStroke(2.0f));
        renderer.setSeriesStroke(1, new BasicStroke(2.0f));
        renderer.setSeriesStroke(2, new BasicStroke(2.0f));
        renderer.setSeriesStroke(3, new BasicStroke(2.0f));
        renderer.setSeriesStroke(4, new BasicStroke(2.0f));
        renderer.setSeriesStroke(5, new BasicStroke(2.0f));
        renderer.setSeriesStroke(6, new BasicStroke(2.0f));
        renderer.setSeriesStroke(7, new BasicStroke(2.0f));
        renderer.setSeriesStroke(8, new BasicStroke(2.0f));

        plot.setRenderer(renderer);

        this.jPanelGrafica.removeAll();
        this.jPanelGrafica.add(cp, BorderLayout.CENTER);
        this.jPanelGrafica.validate();
    }

    /*
    public void graficar() {
        //DefaultCategoryDataset dtsc = new DefaultCategoryDataset();
        XYSeriesCollection dataset;
        dataset = new XYSeriesCollection();
        XYSeries data = new XYSeries("data");
        
        for(int i=0; i<modelo.getT().length; i++) {
            data.add(modelo.getT()[i],modelo.getS()[i]*modelo.getPobTotal());
        }
        dataset.addSeries(data);
        JFreeChart grafica = ChartFactory.createXYLineChart("Titulo", "Días", "Población", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        add(cp);
        //cp.setBounds(500,40,500,400);
        //cp.setBounds((int)this.jPanelGrafica.getAlignmentX()+20,(int)this.jPanelGrafica.getAlignmentY()+20,800,500);
        
        
        
        Dimension d = this.jPanelGrafica.getSize();
        
        cp.setBounds(20,20,d.width-20,d.height-20);
        
        this.jPanelGrafica.removeAll();
        this.jPanelGrafica.add(cp,BorderLayout.CENTER);
        this.jPanelGrafica.validate();
    }
     */
    public void graficar(int indxGraf, String tituloGraf, int rg, int ss) {
        //DefaultCategoryDataset dtsc = new DefaultCategoryDataset();
        XYSeriesCollection dataset;
        dataset = new XYSeriesCollection();
        XYSeries data = new XYSeries(tituloGraf);

        Color c = Color.RED;

        switch (indxGraf) {
            case 1:
                for (int i = 0; i < modelo.getT().length; i++) {
                    //data.add(modelo.getT()[i],modelo.getS()[rg][ss][i]*modelo.getPobTotalRS(rg,ss));
                    data.add(modelo.getT()[i], modelo.getS()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.RED;
                break;
            case 2:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getE()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.GREEN;
                break;
            case 3:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getI0()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.YELLOW;
                break;
            case 4:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getI1()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.GRAY;
                break;
            case 5:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getI2()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.BLUE;
                break;
            case 6:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getI3()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.CYAN;
                break;
            case 7:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getR()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.MAGENTA;
                break;
            case 8:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getD()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.BLACK;
                break;
            case 9:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.getNR()[rg][ss][i] * modelo.getPobTotalRS(rg, ss));
                }
                c = Color.ORANGE;
                break;
        }

        dataset.addSeries(data);
        JFreeChart grafica = ChartFactory.createXYLineChart(tituloGraf, "Días", "Población", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        add(cp);

        Dimension d = this.jPanelGrafica.getSize();

        cp.setBounds(20, 20, d.width - 20, d.height - 20);

        final XYPlot plot = grafica.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesPaint(0, c);
        renderer.setSeriesStroke(0, new BasicStroke(2.0f));
        plot.setRenderer(renderer);

        //this.jPanelGrafica.get
        this.jPanelGrafica.removeAll();
        this.jPanelGrafica.add(cp, BorderLayout.CENTER);
        this.jPanelGrafica.validate();
    }

    // regiones
    public void graficar(int indxGraf, String tituloGraf, int rg) {
        //DefaultCategoryDataset dtsc = new DefaultCategoryDataset();
        XYSeriesCollection dataset;
        dataset = new XYSeriesCollection();
        XYSeries data = new XYSeries(tituloGraf);

        Color c = Color.RED;
        //modelo.sumaElementosEstado(modelo.getS(),rg,i)*modelo.getPobTotalRS_Region(rg)
        switch (indxGraf) {
            case 1:
                for (int i = 0; i < modelo.getT().length; i++) {
                    //data.add(modelo.getT()[i],modelo.getS()[rg][ss][i]*modelo.getPobTotalRS(rg,ss));
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getS(), rg, i));
                }
                c = Color.RED;
                break;
            case 2:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getE(), rg, i));
                }
                c = Color.GREEN;
                break;
            case 3:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI0(), rg, i));
                }
                c = Color.YELLOW;
                break;
            case 4:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI1(), rg, i));
                }
                c = Color.GRAY;
                break;
            case 5:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI2(), rg, i));
                }
                c = Color.BLUE;
                break;
            case 6:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getI3(), rg, i));
                }
                c = Color.CYAN;
                break;
            case 7:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getR(), rg, i));
                }
                c = Color.MAGENTA;
                break;
            case 8:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getD(), rg, i));
                }
                c = Color.BLACK;
                break;
            case 9:
                for (int i = 0; i < modelo.getT().length; i++) {
                    data.add(modelo.getT()[i], modelo.sumaElementosEstadoWPob(modelo.getNR(), rg, i));
                }
                c = Color.ORANGE;
                break;
        }

        dataset.addSeries(data);
        JFreeChart grafica = ChartFactory.createXYLineChart(tituloGraf, "Días", "Población", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        add(cp);

        Dimension d = this.jPanelGrafica.getSize();

        cp.setBounds(20, 20, d.width - 20, d.height - 20);

        final XYPlot plot = grafica.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesPaint(0, c);
        renderer.setSeriesStroke(0, new BasicStroke(2.0f));
        plot.setRenderer(renderer);

        //this.jPanelGrafica.get
        this.jPanelGrafica.removeAll();
        this.jPanelGrafica.add(cp, BorderLayout.CENTER);
        this.jPanelGrafica.validate();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameSimulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameSimulador().setVisible(true);
            }
        });
    }

    public void setParamsGUI(Covid19.SerieType _type, String... vars) {

        jTextFieldDelta0.setText(vars[0]);
        jTextFieldDelta1.setText(vars[1]);
        jTextFieldDelta2.setText(vars[2]);
        jTextFieldDelta3.setText(vars[3]);
        jTextFieldETHA0.setText(vars[4]);
        jTextFieldETHA1.setText(vars[5]);
        jTextFieldETHA2.setText(vars[6]);
        jTextFieldETHA3.setText(vars[7]);
        if (_type == Covid19.SerieType.DEATHS) {
            jTextFieldMIUUB.setText(vars[8]);

            jTextFieldPHIX0.setText("" + modelo.getPHIXB()[0]);
            jTextFieldPHIX1.setText("" + modelo.getPHIXB()[1]);
            jTextFieldPHIX2.setText("" + modelo.getPHIXB()[2]);
            jTextFieldPHIX3.setText("" + modelo.getPHIXB()[3]);
            jTextFieldMIUN.setText("" + modelo.getMIUN());
        } else if (_type == Covid19.SerieType.RECOVERY) {
            jTextFieldPHIX0.setText(vars[8]);
            jTextFieldPHIX1.setText(vars[9]);
            jTextFieldPHIX2.setText(vars[10]);
            jTextFieldPHIX3.setText(vars[11]);
            jTextFieldMIUN.setText(vars[12]);

            jTextFieldMIUUB.setText("" + modelo.getMIUUB());

        } else {
            jTextFieldPHIX0.setText(vars[8]);
            jTextFieldPHIX1.setText(vars[9]);
            jTextFieldPHIX2.setText(vars[10]);
            jTextFieldPHIX3.setText(vars[11]);
            jTextFieldMIUN.setText(vars[12]);
            jTextFieldMIUUB.setText(vars[13]);
        }

    }

    public JComboBox<String> getjComboBoxEscenarios() {
        return jComboBoxEscenarios;
    }

    public JComboBox<String> getjComboBoxRegion() {
        return jComboBoxRegion;
    }

    public JComboBox<String> getjComboBoxEstados() {
        return jComboBoxEstados;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonCargar;
    private javax.swing.JButton jButtonExportExcel;
    private javax.swing.JComboBox<String> jComboBoxEscenarios;
    private javax.swing.JComboBox<String> jComboBoxEstados;
    private javax.swing.JComboBox<String> jComboBoxEstrato;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSelectorEdos;
    private javax.swing.JPanel jPanelGrafica;
    private javax.swing.JPanel jPanelParam;
    private javax.swing.JPanel jPanelSelector;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JScrollPane jScrollPaneResultados;
    private javax.swing.JTable jTableResultados;
    private javax.swing.JTextField jTextFieldBeta0;
    private javax.swing.JTextField jTextFieldBeta1;
    private javax.swing.JTextField jTextFieldBeta2;
    private javax.swing.JTextField jTextFieldBeta3;
    private javax.swing.JTextField jTextFieldDELT;
    private javax.swing.JTextField jTextFieldDelta0;
    private javax.swing.JTextField jTextFieldDelta1;
    private javax.swing.JTextField jTextFieldDelta2;
    private javax.swing.JTextField jTextFieldDelta3;
    private javax.swing.JTextField jTextFieldETHA0;
    private javax.swing.JTextField jTextFieldETHA1;
    private javax.swing.JTextField jTextFieldETHA2;
    private javax.swing.JTextField jTextFieldETHA3;
    private javax.swing.JTextField jTextFieldKAPP;
    private javax.swing.JTextField jTextFieldMIUN;
    private javax.swing.JTextField jTextFieldMIUUB;
    private javax.swing.JTextField jTextFieldPCONB;
    private javax.swing.JTextField jTextFieldPHIX0;
    private javax.swing.JTextField jTextFieldPHIX1;
    private javax.swing.JTextField jTextFieldPHIX2;
    private javax.swing.JTextField jTextFieldPHIX3;
    private javax.swing.JTextField jTextFieldPTRA;
    private javax.swing.JTextField jTextFieldPob;
    // End of variables declaration//GEN-END:variables

}
