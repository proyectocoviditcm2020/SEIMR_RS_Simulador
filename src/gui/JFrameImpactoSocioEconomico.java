/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import domain.ModelSEIMRRS2;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.SAVE_DIALOG;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import optimization.core.FastNonDominatedSort;
import optimization.core.Solution;
import optimization.heuristics.Algorithm;
import optimization.heuristics.NSGA2;
import optimization.operators.Crossover;
import optimization.operators.DominanceComparator;
import optimization.operators.Mutation;
import optimization.operators.Selection;
import optimization.operators.impl.BinaryTournament;
import optimization.operators.impl.PolynomialMutation;
import optimization.operators.impl.SBXCrossover;
import optimization.problems.Covid19BiObjective;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import tech.tablesaw.api.Table;
import tech.tablesaw.api.DoubleColumn;

/**
 *
 * @author thinkpad
 */
public class JFrameImpactoSocioEconomico extends javax.swing.JFrame {

    private SwingWorker<Void, Integer> taskWorker;
    private ArrayList<Solution> bag;
    private ArrayList<Solution> solutions;
    private Covid19BiObjective problem;
    private ModelSEIMRRS2 model;

    /**
     * Creates new form JFrameImpactoSocioEconomico
     */
    public JFrameImpactoSocioEconomico() {
        initComponents();
	this.setLocationRelativeTo(null);
        if (model == null) {
            model = new ModelSEIMRRS2();
            model.setEscenario(3);
        }
        problem = new Covid19BiObjective(model, 6);
        graficar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanelOptions = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldIter = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPob = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        Exportar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextFieldExecutions = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanelGraph = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        JPanelOptions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        JPanelOptions.setPreferredSize(new java.awt.Dimension(800, 150));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Impacto Socio Economico");

        jTextFieldIter.setText("10");
        jTextFieldIter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIterActionPerformed(evt);
            }
        });

        jLabel3.setText("Iteraciones:");

        jLabel4.setText("Poblacion:");

        jTextFieldPob.setText("50");
        jTextFieldPob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPobActionPerformed(evt);
            }
        });

        jLabel5.setText("Configuracion del algoritmo");

        jButton4.setText("Optimizar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        Exportar.setText("Exportar");
        Exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportarActionPerformed(evt);
            }
        });

        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextFieldExecutions.setText("10");

        jLabel6.setText("Ejecuciones:");

        javax.swing.GroupLayout JPanelOptionsLayout = new javax.swing.GroupLayout(JPanelOptions);
        JPanelOptions.setLayout(JPanelOptionsLayout);
        JPanelOptionsLayout.setHorizontalGroup(
            JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelOptionsLayout.createSequentialGroup()
                .addGroup(JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelOptionsLayout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jLabel1))
                    .addGroup(JPanelOptionsLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addGroup(JPanelOptionsLayout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(JPanelOptionsLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldIter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPob, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldExecutions, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(64, 64, 64)
                        .addGroup(JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Exportar)
                            .addComponent(jButton3))))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        JPanelOptionsLayout.setVerticalGroup(
            JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelOptionsLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(9, 9, 9)
                        .addGroup(JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextFieldIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldPob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldExecutions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Exportar))
                .addGap(18, 18, 18)
                .addGroup(JPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        getContentPane().add(JPanelOptions, java.awt.BorderLayout.PAGE_START);

        jPanelGraph.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelGraphLayout = new javax.swing.GroupLayout(jPanelGraph);
        jPanelGraph.setLayout(jPanelGraphLayout);
        jPanelGraphLayout.setHorizontalGroup(
            jPanelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 832, Short.MAX_VALUE)
        );
        jPanelGraphLayout.setVerticalGroup(
            jPanelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelGraph, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (taskWorker != null) {
            if (!taskWorker.isDone()) {
                taskWorker.cancel(true);
            }
        }
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void ExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportarActionPerformed
        // TODO add your handling code here:
        if (taskWorker != null) {
            if (!taskWorker.isDone()) {
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Existe aun ejecuciones pendientes, Solo se exportaran las soluciones descubiertas hasta el momento.\nEsta seguro ? ");
                if (showConfirmDialog == JOptionPane.YES_OPTION) {
                    // this.parent.setParamsGUI(gZetaI0.getText(), gZetaI1.getText(), gZetaI2.getText(), gZetaI3.getText(), gSigmaI0.getText(), gSigmaI1.getText(), gSigmaI2.getText(), gSigmaI3.getText(), MiuSigma.getText(), jTextFieldMiuN.getText());
                    taskWorker.cancel(true);
                    exportar();
                }
            } else {
                // this.parent.setParamsGUI(gZetaI0.getText(), gZetaI1.getText(), gZetaI2.getText(), gZetaI3.getText(), gSigmaI0.getText(), gSigmaI1.getText(), gSigmaI2.getText(), gSigmaI3.getText(), MiuSigma.getText(), jTextFieldMiuN.getText());
                exportar();
            }
        } else {
            // this.parent.setParamsGUI(gZetaI0.getText(), gZetaI1.getText(), gZetaI2.getText(), gZetaI3.getText(), gSigmaI0.getText(), gSigmaI1.getText(), gSigmaI2.getText(), gSigmaI3.getText(), MiuSigma.getText(), jTextFieldMiuN.getText());
            exportar();
        }
    }//GEN-LAST:event_ExportarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        int population = Integer.parseInt(jTextFieldPob.getText());
        int iterations = Integer.parseInt(jTextFieldIter.getText());
        int executions = Integer.parseInt(jTextFieldExecutions.getText());
        int _population = Math.max(population, 2);
        int _iterations = Math.max(iterations, 1);
        int EXECUTIONS = Math.max(executions, 1);

        final Crossover crossover = new SBXCrossover(.9, 20);
        final Mutation mutation = new PolynomialMutation();
        final DominanceComparator solutionComparator = new DominanceComparator();
        final Selection selection = new BinaryTournament((population / 2 > 2) ? population / 2 : 2, solutionComparator);
        // Algorithm algorithm = new NSGA2(problem, population, iterations, crossover, mutation, selection);

        if (taskWorker == null || taskWorker.isDone()) {
            bag = new ArrayList<>();
            taskWorker = new SwingWorker<Void, Integer>() {
                @Override
                protected void process(List<Integer> chunks) {
                    if (chunks.size() > 0) {
                        int current = chunks.get(chunks.size() - 1);
                        jProgressBar1.setValue(current);

                        jProgressBar1.setToolTipText("Ejecutando ... " + (current));
                        if (current == jProgressBar1.getMaximum()) {
                            jProgressBar1.setToolTipText("Finalizado");
                        }
                        if (!bag.isEmpty()) {
                            if (solutions == null) {
                                solutions = new ArrayList<>();
                            }
                            solutions.clear();
                            bag.forEach(s -> {
                                solutions.add(s.copy());
                            });
                            update_plot();
                        }
                    }
                }

                @Override
                protected Void doInBackground() throws Exception {
                    jButton4.setEnabled(false);
                    jProgressBar1.setMaximum(EXECUTIONS);
                    if (jProgressBar1.getMaximum() > 1) {
                        publish(0);
                    }
                    for (int i = 1; i <= EXECUTIONS; i++) {
                        publish(i);
                        System.out.print("running... " + i + " ");
                        Algorithm copy = new NSGA2(problem, _population, _iterations, crossover, mutation, selection);
                        copy.execute();
                        FastNonDominatedSort<Solution> fnds = new FastNonDominatedSort<>();
                        ArrayList<Solution> join = new ArrayList<>((ArrayList<Solution>) bag.clone());
                        join.addAll(copy.getSolutions());
                        //fnds.computeRanking(copy.getSolutions());
                        fnds.computeRanking(join);
                        bag.clear();
                        int indexFront = 0;
                        for (Solution s : fnds.getSubFront(indexFront)) {
                            if (!bag.contains(s.copy())) {
                                bag.add(s.copy());
                            }
                        }
                        while (bag.size() < 3 && indexFront < fnds.getNumberOfSubFronts()) {
                            for (Solution s : fnds.getSubFront(indexFront)) {
                                if (!bag.contains(s.copy())) {
                                    bag.add(s.copy());
                                }
                            }
                            indexFront++;
                        }

                    }
                    publish(EXECUTIONS);
                    jButton4.setEnabled(true);
                    return null;
                }
            };

            taskWorker.execute();

        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextFieldIterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIterActionPerformed

    private void jTextFieldPobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPobActionPerformed
    private void graficar() {
        XYSeriesCollection dataset = new XYSeriesCollection();
        JFreeChart createXYLineChart = ChartFactory.createXYLineChart("Impacto socio economico", "Intensidad de la cuarentena", "% casos", dataset);
        ChartPanel cp = new ChartPanel(createXYLineChart);

        //System.out.println("org.castellanos94.covid19resources.gui.Main.graficar()" + d);
        cp.setBounds(5, 5, 820, 430);
        this.jPanelGraph.removeAll();
        this.jPanelGraph.add(cp, BorderLayout.CENTER);
        this.jPanelGraph.validate();
    }

    private void update_plot() {
        String label = "Impacto socio economico";
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries death = new XYSeries("Defunciones");
        XYSeries jobs = new XYSeries("Perdida de empleo");

        Color c = Color.RED;
        if (solutions != null && !solutions.isEmpty()) {
            double maxf1 = 0, minf1 = Double.MAX_VALUE;
            double maxf2 = 0, minf2 = Double.MAX_VALUE;
            for (Solution s : solutions) {
                double f1 = s.getObjective(0).doubleValue();
                double f2 = s.getObjective(1).doubleValue();
                if (maxf1 < f1) {
                    maxf1 = f1;
                }
                if (minf1 > f1) {
                    minf1 = f1;
                }
                if (maxf2 < f2) {
                    maxf2 = f2;
                }
                if (minf2 > f2) {
                    minf2 = f2;
                }
            }
            for (Solution s : solutions) {
                double avg = 0;
                for (Number n : s.getVariables()) {
                    avg += n.doubleValue();
                }
                if (s.getVariables().size() > 0) {
                    avg /= s.getVariables().size();
                }
                death.add(avg, (s.getObjective(0).doubleValue() - minf1) / (maxf1 - minf1));
                jobs.add(avg, (s.getObjective(1).doubleValue() - minf2) / (maxf2 - minf2));
            }
        }
        System.out.println("Data death:" + death.getDescription());
        System.out.println(death.getItemCount());
        dataset.addSeries(death);
        dataset.addSeries(jobs);

        JFreeChart grafica = ChartFactory.createXYLineChart(label, "Intensidad de la cuarentena", "% casos", dataset);
        ChartPanel cp = new ChartPanel(grafica);
        //add(cp);

        cp.setBounds(5, 5, 820, 430);

        final XYPlot plot = grafica.getXYPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesPaint(0, c);
        renderer.setSeriesStroke(0, new BasicStroke(2.0f));
        renderer.setSeriesPaint(1, Color.black);
        renderer.setSeriesStroke(1, new BasicStroke(2.0f));
        plot.setRenderer(renderer);

        // this.jPanelGrafica.get
        this.jPanelGraph.removeAll();
        this.jPanelGraph.add(cp, BorderLayout.CENTER);
        this.jPanelGraph.validate();
        this.jPanelGraph.updateUI();
    }

    public Covid19BiObjective getProblem() {
        return this.problem;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameImpactoSocioEconomico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameImpactoSocioEconomico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameImpactoSocioEconomico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameImpactoSocioEconomico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrameImpactoSocioEconomico jframe = new JFrameImpactoSocioEconomico();
                // Fijar los parametros descubiertos de un proceso de optimizacion
                /* jframe.getProblem().setGSigma(gsigma);
                jframe.getProblem().setGZeta(gzeta);
                jframe.getProblem().setMiuSigma(miusigma);
                jframe.getProblem().setMiuN(miun);*/
                jframe.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exportar;
    private javax.swing.JPanel JPanelOptions;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanelGraph;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextFieldExecutions;
    private javax.swing.JTextField jTextFieldIter;
    private javax.swing.JTextField jTextFieldPob;
    // End of variables declaration//GEN-END:variables

    private void exportar() {
        if (solutions != null && !solutions.isEmpty()) {
            JFileChooser fileChooser = new JFileChooser() {
                @Override
                public void approveSelection() {
                    File f = getSelectedFile();
                    if (f.exists() && getDialogType() == SAVE_DIALOG) {
                        int result = JOptionPane.showConfirmDialog(this, "The file exists, overwrite?", "Existing file", JOptionPane.YES_NO_CANCEL_OPTION);
                        switch (result) {
                            case JOptionPane.YES_OPTION:
                                super.approveSelection();
                                return;
                            case JOptionPane.NO_OPTION:
                                return;
                            case JOptionPane.CLOSED_OPTION:
                                return;
                            case JOptionPane.CANCEL_OPTION:
                                cancelSelection();
                                return;
                        }
                    }
                    super.approveSelection();
                }
            };
            fileChooser.setDialogTitle("Specify a file to save");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                System.out.println("Save as file: " + fileToSave.getAbsolutePath());
                String strFile = fileToSave.getAbsolutePath();
                if (!strFile.endsWith(".csv")) {
                    strFile += ".csv";
                }
                try {
                    //resourceModel.exportToExcel(fileToSave.getAbsolutePath(), hospitales_);
                    Table data = Table.create("Data to export");
                    FastNonDominatedSort<Solution> fnds = new FastNonDominatedSort<>();
                    fnds.computeRanking(solutions);
                    ArrayList<DoubleColumn> x = new ArrayList<>();
                    for (int i = 0; i < solutions.get(0).getVariables().size(); i++) {
                        DoubleColumn tmp = DoubleColumn.create("Cuarentena " + (i + 1));
                        x.add(tmp);
                    }
                    DoubleColumn f1 = DoubleColumn.create("Defunciones");
                    DoubleColumn f2 = DoubleColumn.create("Empleos perdidos en miles");
                    DoubleColumn penaltie = DoubleColumn.create("Penalidad");
                    for (Solution s : fnds.getSubFront(0)) {
                        for (int i = 0; i < x.size(); i++) {
                            x.get(i).append(s.getVariable(i).doubleValue());
                        }
                        f1.append(s.getObjective(0));
                        f2.append(s.getObjective(1));
                        penaltie.append(s.getPenalties());
                    }
                    for (DoubleColumn doubleColumn : x) {
                        data.addColumns(doubleColumn);
                    }
                    data.addColumns(f1, f2, penaltie);
                    data.write().csv(strFile);
                    JOptionPane.showMessageDialog(this, "El archivo se guardo correctamente", "Dialog",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(JFrameImpactoSocioEconomico.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Ocurrio un error al guardar el archivo", "Error al guardar",
                            JOptionPane.ERROR_MESSAGE);
                }

            }
        }
    }
}
